class Solution {
public:
    vector<int> avoidFlood(vector<int>& rains) {

    unordered_map<int, int> fullLakes; // maps lake id to the day it became full

    set<int> dryDays; // stores the days available to dry a lake

    vector<int> result(rains.size(), -1); // initialize result with -1
    
    for (int i = 0; i < rains.size(); ++i) 
    {
        if (rains[i] > 0) 
        { // it rains on a lake
            int lake = rains[i];
            if (fullLakes.count(lake)) 
            { // check if this lake is already full
                auto it = dryDays.lower_bound(fullLakes[lake]);

                if (it == dryDays.end()) 
                {
                    return {}; // city floods, no valid solution
                }


                result[*it] = lake; // dry the lake on this day
                dryDays.erase(it); // remove this dry day
            }


            fullLakes[lake] = i; // update the day when this lake became full
            result[i] = -1; // it rains on this day, so no lake is dried
        } 
        else 
        {
            dryDays.insert(i); // add this day as a potential day to dry a lake
        }
    }
    
    for (int day : dryDays) 
    {
        result[day] = 1; // any lake can be dried on this day, here using 1 as a placeholder
    }
    
    return result;


    }
};
