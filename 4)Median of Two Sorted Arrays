class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        
        int n1=nums1.size(); int n2=nums2.size();

        if(n1>n2) return findMedianSortedArrays(nums2,nums1);

        int start=0,end=n1;

        int maxleft1,maxleft2,minright1,minright2;

        while(start<=end)
        {
            int partition1=(start+end)/2;
            int partition2=(n1+n2+1)/2 - partition1;

            if(partition1==0) maxleft1=INT_MIN;
            else maxleft1=nums1[partition1-1];

            if(partition2==0) maxleft2=INT_MIN;
            else maxleft2=nums2[partition2-1];

            if(partition1==n1) minright1=INT_MAX;
            else minright1=nums1[partition1];

            if(partition2==n2) minright2=INT_MAX;
            else minright2=nums2[partition2];



            if(maxleft1<=minright2 and maxleft2<=minright1)
            {
                if((n1+n2)%2==0)
                {
                    return (double)(max(maxleft1,maxleft2)+min(minright1,minright2))/2;
                }
                else
                {
                    return (double) max(maxleft1,maxleft2);
                }
            }
            else if(maxleft1>minright2)
            {
                end=partition1-1;
            }
            else
            {
                 start=partition1+1;
            }

        }

        return 0;

    }
};
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        
        
        int n=nums1.size();
        int m=nums2.size();
        
        vector<double>ans;
        
        int i=0,j=0;
        
        while(i<n and j<m)
        {
          if(nums1[i]<nums2[j])
          {
              ans.push_back(nums1[i]);
              i++;
              
          }
            else if(nums1[i]>nums2[j])
            {
                ans.push_back(nums2[j]);
                j++;
            }
            else
            {
                ans.push_back(nums1[i]);
                ans.push_back(nums2[j]);
                i++;
                j++;

            }
        
        }
        
        while(i<n)
        {
            ans.push_back(nums1[i]);
            i++;
        }
        
        while(j<m)
        {
            ans.push_back(nums2[j]);
            j++;
        }
        
        
        if(ans.size()%2==0)
        {
            double x=ans[ans.size()/2];
            double y=ans[(ans.size()/2)-1];
            
            return (x+y)/2;

        }
        else
        {
            return ans[ans.size()/2];
        }
        
        
        
    }
};
